Why on_input() is different from update():

    The reason for it is that a widget can be updated not only by input, but these 3 scenarios:
    1) user input
    2) out-of-user input (filesystem change on SaveFileDialog or sth like this)
    3) in reaction to Msg emitted by child widget (result escalation akin to unwinding the stack).

Another temptation is to merge Widget and Layout.

I honestly cannot recall why they are separated at this point. Originally the problem was that Msg types were
type arguments to Widgets, but I gave up on this, introducing a boxed trait instead.

Ah, now I recall. I wanted the widget.update() to have immediate access to child widgets via mut ref, without any
Rc<RefCell> thing.

The most desired way out of this mess would be something alike html/json define a tree of widgets/layouts, but with
possibility to access directly the members.

So our TwoButtonEdit would have something like

Window::new(30,20).with(
    Frame::new(Style::Double)
    .with(EditBox::new(some parameters))
    .with(separator)
    .with(Line::new(Dir::Horizontal)
        .with(Button::new(OK, ....
        .with(separator)
        .with(Button::new(Cancel, ...
)

One way to make get the editbox and buttons as members would be to pass them as functions:
&mut Widget -> &mut Widget, that will be called with Self as argument.

Or I can do it the other way around. That I put Widgets in Layouts (ownership) and borrow them from
layouts via methods on Self. So method on Self.ButtonOK() would extract a say "OK button" from the proper layout.
That's way easier in terms of ownership, but looks like shit in code.