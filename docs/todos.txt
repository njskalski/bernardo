// BIG CHANGES TO DO:

update max_size in widget.layout, to inform widget whether it should self-constrain OR take as much space as possible.
hard case to handle: "use as much as you can X" when "X is unbound because of scrolling"

make input handling reusable
    There will be maaaany widgets handling input.

    There will be a simple input (single cursor) and THE INPUT (editor one).

    I will implement simple input in editbox, maybe that's going to be enough. If not, the code from there
    needs to be extracted into some reusable sub-component.

    The big input has to be implemented in reusable way, because I want full powers of edition in both code editor
    where all the magic (coloring, autocomplete etc) are available, but also in say a chat window implemented by some
    plugin.

//TODO scrolling is now limited to u16 number of lines!
    I guess the solution to it is a separate widget for longer files, we don't want to enable parsing of more than
    65k lines files, how ofthen does that need to happen?

//TODO
     change every new_idx < sth.size() - 1  => to => new_idx + 1 < sth.size() to avoid underflow if sth.size is 0

// TODO use smallvec to optimise cursor set

// TODO remove the second Box in definition of fuzzy file item provider, just return &dyn Item - tried twice, failed twice

// TODO change Rope to Buffer in Edit Box, but block newlines