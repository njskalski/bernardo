The size is needed to extract FocusGroup from Layout.
I can imagine that Layout might get modified based on size as well.

So: a widget input is interpreted only in context of it's most recent display state, let's call it "Depiction".

The Depiction is calculated based on output size and probably theme, focus path etc. If these parameters have not
changed, we can re-use Depiction from before.

One can assume that any state mutating input will result in invalidation of previously cached Depiction.

So lifetime of widget is as follows:

1) Widget is created
2) Widget is queried for minimum size.
3) If a minimum size constraint is satisfied, widget receives "actual size available". This is the earliest moment we
    can and should calculate Layout (because we need to return information of actual size we are going to use).
    We CAN, but we don't have to, calculate Focus Group.
4) Render
5) Maybe input.
6) Maybe message from a child.

It is in code like this

2 -> widget.min_size
3 -> widget.layout.
    if widget delegates recalculation of sub-widgets to Layout helper trait, it calls Layout.sizes().
    Since Layout is a mut call, sizes() must access "owner" mutably.