Now I got to the part when I need to think about filesystem.

In future, I don't want to shut the door for a mock filesystem or remote filesystem. But that's
the future.

For now, filesystem is about:

1) communicating with OS about what files are there
2) watching the state of these files
3) communicating with language server protocol about changes in this

We want this thing to be a "singleton" - initialized once, on main level.

Now, there are widgets that will use filesystem, like FileTree and SaveFileAsDialog.
Until now, I confused their state (expand on tree nodes) with filesystem. These are separate.
The filesystem will act as "singleton", and will be queried by other widgets via some "views" into it.

Watching files - this will be a separate thread using "notify" features of kernel (or some remote service in the future).

Communicating updates from filesystem to widgets will go through NORMAL update protocol, that is it will be pushed via
"recursive_treat_views". This tree will never be big, and trying to optimise there opens the gate to hell.

There is only one caveat to address: the IO operation can be blocking. We can imagine it takes several seconds or even
a timeout to get response for "list" request on some node. The result can also be crazy big.

Now here's how I want to go about it: the IO operation results in quite-immediate response from filesystem (say timeout
500ms). This response contains one important information - whether the response is exhausting or not.
In the latter case, we expect the request to continue in separate thread in the background, and the results to be
delivered via STANDARD UPDATE MECHANISM.

