So I want one the one hand to have sensible defaults, on the other avoid situation where I need two instances of Gladius
running to handle a two-language project.

So one workspace might need to run multiple LspClients.
Furthermore, I can imagine TWO LspClients of the same language, working in parallel, because one works better with this
and the other works better with that, and I merge their results with some rules.

So [Workspace] 1-* [SuggestionProviders]

I think I will make first basic SuggestionProvider based on LSP, and then eventually allow more complicated scenarios.

Now, obviously we need a Workspace definition (our) and within it more than one project might exist.
Projects might be of multiple languages.
Unfortunately, some languages also defined workspaces, so we might need to deal with them. I will map such definition
into "project groups", but not in first version.

By default, I will create a Workspace of directory, and then allow "inspector" to come up with definition of projects,
project groups, build targets etc. for that directory. Then I will dump that entire configuration into a .ron file,
skipping all default fields, so the definition is minimal and delegates as much as possible into specialized "inspectors".

So Inspector takes a directory, and creates a project OR project group from it.

So workflow is following:

we open a directory as workspace
if workspace definition is found, we try to read it
if there is no workspace definition, we try to build it.

building workspace:
    we start all available "inspectors", and they go inside and look for projects. They produce ProjectScopes.
    each project scope has a directory and Handler. Handler is what transforms contents of that directory into
    standard IDE functions (build, test and run targets) and spawns proper LSPs.


TODO:
add autoinstall? rustup +nightly component add rust-analyzer-preview