name: Everything
on: [ push ]

jobs:
  everything:
    runs-on: docker
    container:
      image: rust:1-bookworm
    steps:
      - name: install prerequisites
        run: |
          apt-get update
          apt-get install -y curl build-essential gcc make clangd clang nodejs python3-pip python3-venv

      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          submodules: 'true'

      - name: install rustfmt and rust-analyzer and nextest
        run: |
          rustup component add rustfmt
          rustup component add rust-analyzer
          curl -LsSf https://get.nexte.st/latest/linux | tar zxf - -C ${CARGO_HOME:-~/.cargo}/bin
          
      - name: check-fmt
        run: cargo fmt --check

      - name: install golang
        run: |
          wget https://go.dev/dl/go1.23.5.linux-amd64.tar.gz
          rm -rf /usr/local/go && tar -C /usr/local -xzf go1.23.5.linux-amd64.tar.gz
          echo "/usr/local/go/bin" >> $GITHUB_PATH

      - name: install gopls
        run: |
          go install golang.org/x/tools/gopls@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: install python-language-server
        run: |
          cd test_envs/python_test_1
          python3 -m venv .venv
          .venv/bin/pip install -r requirements.txt
          echo "$PWD/.venv/bin" >> $GITHUB_PATH
      # this was taking too long
      #      - name: install haskell and it's language-server
      #        run: |
      #          apt install -y build-essential curl libffi-dev libffi8 libgmp-dev libgmp10 libncurses-dev libncurses5 libtinfo5 pkg-config
      #          curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org -o get-ghcup.sh
      #          chmod +x get-ghcup.sh
      #          BOOTSTRAP_HASKELL_NONINTERACTIVE=1 ./get-ghcup.sh
      - name: check versions
        run: |
          cargo --version
          which rust-analyzer
          which pylsp
          which gopls
          gopls version
      - name: build
        run: cargo build
      - name: test
        run: cargo nextest run --no-fail-fast --retries 4
  build_release:
    needs: [ everything ]
    runs-on: docker
    container:
      image: rust:1-bookworm
    if: startsWith(github.ref, 'refs/tags/v') # This ensures the job runs only for matching tag
    steps:
      - name: install prerequisites
        run: |
          apt-get update
          apt-get install -y curl nodejs
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          submodules: 'true'
      - name: build release
        run: |
          cargo build --release
          mkdir -p release_dir
          cp target/release/gladius release_dir/gladius
      #      - name: mock
      #        run: |
      #          mkdir -p target/release
      #          echo "x" > target/release/gladius
      - name: Release
        uses: https://code.forgejo.org/actions/forgejo-release@v2.5.0
        env:
        GITEA_TOKEN: ${{ secrets.GITEA_TOKEN }}
        GITEA_SERVER_TOKEN: ${{ secrets.GITEA_TOKEN }}
        TAG_NAME: "${GITHUB_REF#refs/tags/}"
        with:
          direction: upload
          repo: "njskalski/bernardo"
          tag: "${{ github.ref_name }}"
          sha: "${{ github.sha }}"
          token: ${{ secrets.GITEA_TOKEN }}
          verbose: true
          release-dir: release_dir
          override: true
